#!/usr/bin/env python

# Copyright 2011, 2012 Michael Steinert
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#     1. Redistributions of source code must retain the above copyright
#        notice, this list of conditions and the following disclaimer.
#
#     2. Redistributions in binary form must reproduce the above copyright
#        notice, this list of conditions and the following disclaimer in the
#        documentation and/or other materials provided with the distribution.
#
#     3. Neither the name of the Joybubbles project nor the names of its
#        contributors may be used to endorse or promote products derived from
#        this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

import argparse, re, sys, urllib2

class Keysyms:
    def __init__(self):
        self.keys = {}
        self.names = {}
    def parse(self, file):
        """Parse an X11 keysym definition."""
        self.keys[0x1] = ['Power']
        self.keys[0x2] = ['Sat']
        self.keys[0x3] = ['TV']
        self.keys[0x4] = ['DVD']
        self.keys[0x5] = ['AUX']
        self.keys[0x6] = ['Guide']
        self.keys[0x7] = ['DVR']
        self.keys[0x8] = ['Input']
        self.keys[0x9] = ['Live_TV']
        self.keys[0xa] = ['Recall']
        self.keys[0xb] = ['Jump']
        self.keys[0xc] = ['Swap']
        self.keys[0xd] = ['PiP']
        self.keys[0xe] = ['Position']
        self.keys[0xf] = ['Dish']
        self.keys[0x10] = ['Info']
        self.keys[0x11] = ['Skip_Forward']
        self.keys[0x12] = ['Skip_Back']
        self.keys[0x13] = ['Record']
        self.keys[0x14] = ['Play']
        self.keys[0x15] = ['Rewind']
        pattern = re.compile('#define (XK|XF86XK)_(\S*)\s*((0x)?[0-9a-fA-F]*)')
        for line in file:
            match = re.match(pattern, line)
            if match:
                name = match.group(2)
                try:
                    sym = int(match.group(3), 0)
                except Exception, err:
                    continue
                if not self.names.has_key(name):
                    if not self.keys.has_key(sym):
                        self.keys[sym] = []
                    self.keys[sym].append(name)
                    self.names[name] = True
    def write(self, filename):
        """Write a keysym definition to a file."""
        file = open(filename, 'w')
        try:
            print >>file, """\
/* Copyright 2011, 2012 Michael Steinert
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     1. Redistributions of source code must retain the above copyright
 *        notice, this list of conditions and the following disclaimer.
 *
 *     2. Redistributions in binary form must reproduce the above copyright
 *        notice, this list of conditions and the following disclaimer in the
 *        documentation and/or other materials provided with the distribution.
 *
 *     3. Neither the name of the Joybubbles project nor the names of its
 *        contributors may be used to endorse or promote products derived from
 *        this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * \\file
 * \\brief Key syms
 * \\author Auto-generated by joy-gen-keysyms.py
 */

#ifndef JOY_DEVICE_KEYSYM_H
#define JOY_DEVICE_KEYSYM_H

#include <glib.h>

G_BEGIN_DECLS

typedef enum {
\tJOY_KEY_RESERVED = 0x0,"""
            max = 0
            for sym in sorted(self.keys):
                for identifier in self.keys[sym]:
                    print >>file, '\tJOY_KEY_' + identifier, '=', hex(sym) + ','
                max = sym
            print >>file, '\tJOY_KEY_MAX =', hex(max + 1)
            print >>file, """\
} JoyKeySym;

G_END_DECLS

#endif // JOY_DEVICE_KEYSYM_H"""
        finally:
            file.close()

if __name__ == '__main__':
    """Generate a keysym definition based on one or more input files."""
    try:
        parser = argparse.ArgumentParser(description=
                'Generate a keysym header file from X11 keysyms.')
        parser.add_argument('URI', nargs='+', help='file(s) to parse')
        parser.add_argument('-o', dest='filename', default='keysym.h',
                help='the output file name')
        args = parser.parse_args()
        ks = Keysyms()
    except Exception, err:
        print str(err)
        sys.exit(1)
    for uri in args.URI:
        try:
            file = urllib2.urlopen(uri)
        except ValueError, err:
            try:
                file = open(uri)
            except Exception, err:
                print uri, ':', err
                continue
        except Exception, err:
                print uri, ':', err
                continue
        try:
            ks.parse(file)
        except Exception, err:
            print uri, ':', err
            continue
        finally:
            file.close()
    try:
        ks.write(args.filename)
    except Exception, err:
        print args.filename, ':', err
        sys.exit(1)
    sys.exit(0)
