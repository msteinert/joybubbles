#!/usr/bin/env python

# Copyright 2011 EchoStar Corporation
#
# EchoStar Corporation
# 100 Inverness Terrace East
# Englewood, CO 80112

import argparse, re, sys, urllib2

class keysyms:
    def __init__(self):
        self.keys = {}
    def parse(self, file):
        """Parse an X11 keysym definition."""
        pattern = re.compile('#define (XK|XF86XK)_(\S*)\s*((0x)?[0-9a-fA-F]*)')
        for line in file:
            match = re.match(pattern, line)
            if match:
                name = match.group(2)
                try:
                    sym = int(match.group(3), 0)
                except Exception, err:
                    continue
                self.keys[sym] = name
    def write(self, filename):
        """Write a keysym definition to a file."""
        file = open(filename, 'w')
        try:
            print >>file, """\
/* Copyright 2011 EchoStar Corporation
 * 
 * EchoStar Corporation
 * 100 Inverness Terrace East
 * Englewood, CO 80112
 */

/**
 * \\file
 * \\brief Key syms
 * \\author Auto-generated by joy-gen-keysyms.py
 */

#ifndef JOY_DEVICE_KEYSYM_H
#define JOY_DEVICE_KEYSYM_H

#include <glib.h>

G_BEGIN_DECLS

typedef enum {
\tJOY_KEY_RESERVED = 0x0,"""
            max = 0
            for sym in sorted(self.keys):
                print >>file, '\tJOY_KEY_' + self.keys[sym], '=', hex(sym) + ','
                max = sym
            print >>file, '\tJOY_KEY_MAX =', hex(max + 1)
            print >>file, """\
} JoyKeySym;

G_END_DECLS

#endif // JOY_DEVICE_KEYSYM_H"""
        finally:
            file.close()

def main():
    """Generate a keysym definition based on one or more input files."""
    try:
        parser = argparse.ArgumentParser(description=
                'Generate a keysym header file from X11 keysyms.')
        parser.add_argument('URI', nargs='+', help='file(s) to parse')
        parser.add_argument('-o', dest='filename', default='keysym.h',
                help='the output file name')
        args = parser.parse_args()
    except Exception, err:
        print str(err)
        sys.exit(1)
    ks = keysyms()
    for uri in args.URI:
        try:
            file = urllib2.urlopen(uri)
        except ValueError, err:
            try:
                file = open(args.URI)
            except Exception, err:
                print uri, ':', err
                continue
        except Exception, err:
                print uri, ':', err
                continue
        try:
            ks.parse(file)
        except Exception, err:
            print uri, ':', err
            continue
        finally:
            file.close()
    try:
        ks.write(args.filename)
    except Exception, err:
        print args.filename, ':', err
        sys.exit(1)
    sys.exit(0)

if __name__ == '__main__':
    main()
